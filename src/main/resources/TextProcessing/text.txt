Many text editors have advanced find (and replace) features.
When I’m programming, I like to use an editor with regular expression search and replace.
This feature is allows one to find text based on complex patterns rather than based just on literals.
Upon occasion I want to examine each of the comments in my source code and either edit them or remove them.
I found that it was difficult to write a regular expression that would find C style comments (the comments that start with /* and end with */) because my text editor does not implement the    "non-greedy matching" feature of regular     expressions.
The solution to this is to write regular expressions that describe each of the possible larger elements, find these as well, decide what type of element each is, and discard the ones that are not comments.
There are tools called lexers or tokenizers that can help with this task.
A lexer accepts regular expressions as input, scans a stream, picks out tokens that match the regular expressions, and classifies the token based on which expression it matched.
The greedy property of regular expressions is used to ensure the longest match.
Although writing a full lexer for C is beyond the scope of this document, those interested should look at lexer generators such as Flex and JFlex.